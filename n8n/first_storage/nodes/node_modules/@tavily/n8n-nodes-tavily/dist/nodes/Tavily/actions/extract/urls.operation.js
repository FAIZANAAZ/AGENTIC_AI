"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = exports.description = exports.properties = void 0;
const transport_1 = require("../../transport");
const display_1 = require("../../display");
const common_descriptions_1 = require("../../descriptions/common.descriptions");
exports.properties = [
    {
        displayName: 'URLs',
        name: 'urls',
        description: 'A list of URLs to extract content from',
        type: 'string',
        typeOptions: {
            multipleValues: true,
            multipleValueButtonText: 'Add URL',
        },
        required: true,
        default: [],
        placeholder: 'e.g. https://tavily.com',
        displayOptions: {
            show: {
                resource: ['extract'],
            },
        },
    },
    {
        displayName: 'Options',
        name: 'options',
        type: 'collection',
        placeholder: 'Add option',
        default: {},
        options: common_descriptions_1.extractOptions,
    },
];
const displayOptions = {
    show: {
        resource: ['extract'],
        operation: ['urls'],
    },
};
exports.description = (0, display_1.updateDisplayOptions)(displayOptions, exports.properties);
async function execute(index) {
    const urls = this.getNodeParameter('urls', index);
    const options = this.getNodeParameter('options', index);
    const processedOptions = {};
    for (const [key, value] of Object.entries(options)) {
        if (typeof value === 'boolean') {
            processedOptions[key] = value;
        }
        else {
            processedOptions[key] = value;
        }
    }
    const body = {
        'urls': urls,
        ...processedOptions,
    };
    const endpoint = "/extract";
    const responseData = await transport_1.tavilyApiRequest.call(this, 'POST', endpoint, body);
    return this.helpers.constructExecutionMetaData(this.helpers.returnJsonArray(responseData), { itemData: { item: index } });
}
exports.execute = execute;
//# sourceMappingURL=urls.operation.js.map